#!/usr/bin/env python

import json
from pathlib import Path

import numpy as np


PARAMS_DIR = Path("params")


def iter_rep(reps, tot, start):
    tot += start
    start_range = range(start, tot, reps)
    stop_range = range(start + reps, tot + reps, reps)
    for i, (j, k) in enumerate(zip(start_range, stop_range), start):
        yield i - start, i, j, k


num_site_points = 30
num_site_reps = 1_000  # per point
site_params = dict(
    ne=10_000,
    samples=500,
    sequence_length=50_000,
    recomb_rate=1e-5,
    mu=np.linspace(1e-7, 1e-5, num=num_site_points),
)

num_branch_points = 30
num_branch_reps = 1_000  # per point
branch_params = dict(
    ne=10_000,
    samples=250,
    sequence_length=1_000,
    recomb_rate=np.linspace(1e-8, 5e-6, num_branch_points),
    mu=0,  # not used in branch sims
)

total_site_reps = num_site_points * num_site_reps
total_branch_reps = num_branch_points * num_branch_reps
tot_reps = total_site_reps + total_branch_reps

rng = np.random.RandomState(23)
seeds = rng.randint(1, 2**31, tot_reps)

num_per_batch = 50
num_site_batches = total_site_reps // num_per_batch
num_branch_batches = total_branch_reps // num_per_batch
assert (
    num_site_batches % num_per_batch == 0
), "site batch size is not compatible with num replicates"
assert (
    num_branch_batches % num_per_batch == 0
), "branch batch size is not compatible with num replicates"

PARAMS_DIR.mkdir()

# we get short and long running in the same rep
mus = np.tile(site_params["mu"], num_site_reps).reshape(num_site_batches, num_per_batch)
for i, rep, start, stop in iter_rep(num_per_batch, total_site_reps, 0):
    mu = mus[i].copy()
    mu.sort()
    assert not (out_file := PARAMS_DIR / f"input_{rep}.json").exists()
    with open(out_file, "w") as fp:
        json.dump(
            {
                "mode": "site",
                "rep": rep,
                "ne": site_params["ne"],
                "r": site_params["recomb_rate"],
                "mu": mu.tolist(),
                "samples": site_params["samples"],
                "sequence_length": site_params["sequence_length"],
                "seeds": seeds[start:stop].tolist(),
            },
            fp,
            indent=2,
        )

recombs = np.tile(branch_params["recomb_rate"], num_branch_reps).reshape(
    num_branch_batches, num_per_batch
)
for i, rep, start, stop in iter_rep(num_per_batch, total_branch_reps, num_site_batches):
    recomb = recombs[i].copy()
    recomb.sort()
    assert not (out_file := PARAMS_DIR / f"input_{rep}.json").exists()
    with open(out_file, "w") as fp:
        json.dump(
            {
                "mode": "branch",
                "rep": rep,
                "ne": branch_params["ne"],
                "r": recomb.tolist(),
                "mu": branch_params["mu"],
                "samples": branch_params["samples"],
                "sequence_length": branch_params["sequence_length"],
                "seeds": seeds[start:stop].tolist(),
            },
            fp,
            indent=2,
        )
