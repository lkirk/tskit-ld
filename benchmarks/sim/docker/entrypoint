#!/usr/bin/env python

import argparse
import json
import logging
import os
import subprocess
from dataclasses import dataclass
from pathlib import Path
from timeit import Timer

import msprime
import numpy as np


@dataclass
class Arguments:
    mode: str
    ne: int
    r: float
    mu: float
    samples: int
    sequence_length: float
    seed: int
    rounds: int = 1  # number of timing rounds per seed
    repeat: int = 1  # number of repeats per round


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("params_file", type=Path)
    parser.add_argument("out_prefix", type=Path)
    args = parser.parse_args()

    if not args.params_file.exists():
        raise ValueError(f"{args.params_file} does not exist")
    with open(args.params_file) as fp:
        raw_args = json.load(fp)

    site_mode = raw_args["mode"] == "site"
    rep = raw_args.pop("rep")

    var = np.array(raw_args.pop("mu") if site_mode else raw_args.pop("r"))
    seeds = np.array(raw_args.pop("seeds"))
    assert len(seeds) == len(var)
    sim_args = [
        Arguments(**{"mu" if site_mode else "r": v, "seed": s, **raw_args})
        for v, s in zip(var, seeds)
    ]

    logging.basicConfig(
        format="%(asctime)s %(levelname)s %(message)s", level=logging.INFO
    )
    log = logging.getLogger(__name__)

    log.info("Processing rep=%d cwd=%s in_file=%s", os.getcwd(), args.params_file, rep)

    results = []
    tree_stats = []
    n_args = len(sim_args)
    n_digits = int(np.log10(n_args)) + 1
    for i, arg in enumerate(sim_args):
        log.info("Processing seed %d (%s/%d)", arg.seed, str(i).zfill(n_digits), n_args)
        ts = msprime.sim_ancestry(
            samples=arg.samples,
            population_size=arg.ne,
            recombination_rate=arg.r,
            sequence_length=arg.sequence_length,
            random_seed=arg.seed,
        )
        if site_mode:
            ts = msprime.sim_mutations(ts, rate=arg.mu, random_seed=arg.seed)

        log.info("Timing LD matrix")
        timer = Timer(stmt=f'ts.ld_matrix(mode="{arg.mode}")', globals=dict(ts=ts))
        results.append(timer.repeat(arg.rounds, arg.repeat))
        tree_stats.append([ts.num_edges, ts.num_trees, ts.num_mutations, ts.num_sites])
        log.info("Seed %d complete", arg.seed)

    norm = np.array([[arg.repeat] for arg in sim_args], dtype=np.float64)
    timing_result = np.array(results, dtype=np.float64)
    timing_result /= norm  # average for each round

    cpu_info_raw = subprocess.run(["lscpu", "--json"], capture_output=True, check=False)

    assert not (info_out := args.out_prefix.with_suffix(".json")).exists()
    assert not (npz_out := args.out_prefix.with_suffix(".npz")).exists()

    log.info("Writing cpu_info=%s result=%s", info_out, npz_out)

    with open(info_out, "w") as fp:
        cpu_info = json.loads(cpu_info_raw.stdout)
        json.dump(
            {
                "params": str(args.params_file),
                "out_prefix": str(args.out_prefix),
                "cpu_info": cpu_info,
            },
            fp,
        )

    np.savez_compressed(
        npz_out,
        # average for each round
        timing_result=timing_result,
        tree_stats=np.array(tree_stats, dtype=np.int64),
    )


if __name__ == "__main__":
    main()
