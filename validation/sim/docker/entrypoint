#!/usr/bin/env python
import argparse
import logging
import os
import sys

import msprime
import numpy as np


def mean_stat_at_distances(stat, num_positions):
    return np.array(
        [
            stat[np.eye(num_positions, k=i, dtype=bool)].mean()
            for i in range(num_positions)
        ]
    )


def compute_mean_stat_for_recomb_distances(ts, positions, mu):
    d2 = ts.ld_matrix(ts, stat="d2_unbiased", mode="branch", positions=[positions])
    pi2 = ts.ld_matrix(ts, stat="pi2_unbiased", mode="branch", positions=[positions])
    dz = ts.ld_matrix(ts, stat="dz_unbiased", mode="branch", positions=[positions])
    return np.vstack(
        [
            mean_stat_at_distances(d2, len(positions)),
            mean_stat_at_distances(dz, len(positions)),
            mean_stat_at_distances(pi2, len(positions)),
        ]
    ) * (mu**2)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("rep")
    parser.add_argument("seeds")
    args = parser.parse_args()

    seeds = np.fromstring(args.seeds, sep="-", dtype=np.int32)
    assert not (seeds < 1).any(), "bad seeds"

    Ne = 10_000
    mu = 2e-8
    r = 1.25e-5
    sequence_length = 100

    logging.basicConfig(
        format="%(asctime)s %(levelname)s %(message)s", level=logging.INFO
    )
    logger = logging.getLogger(__name__)

    # Each basepair position in the tree sequence
    positions = np.arange(0, sequence_length)

    logger.info("Processing rep=%s seeds=%s cwd=%s", args.rep, args.seeds, os.getcwd())
    results = []
    for i, seed in enumerate(seeds):
        logger.info("Starting round %d seed %d", i, seed)
        ts = msprime.sim_ancestry(
            samples=100,
            population_size=Ne,
            recombination_rate=r,
            sequence_length=sequence_length,
            random_seed=seed,
        )
        results.append(compute_mean_stat_for_recomb_distances(ts, positions, mu))
        logger.info("Round %d complete", i)

    np.savez_compressed(args.rep, np.dstack(results).mean(2))


if __name__ == "__main__":
    main()
