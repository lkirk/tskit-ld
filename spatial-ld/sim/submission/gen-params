#!/usr/bin/env python

import json
from pathlib import Path

import numpy as np

RNG = np.random.RandomState(23)

NUM_REPS = 50

MODEL_PARAMS = {
    "K": 5,  # carrying capacity
    "L": 4,  # mean lifetime
    "W": 35.0,  # width of xy space
    "H": 15.0,  # height of xy space
    "G": 1e8,  # genome length
    "MU": 0,  # mutation rate
    "R": 1e-8,  # recombination rate
    "SIM_END": 2e6,  # absolute number of ticks to run for
    "IND_RECORD_LAG": 10,  # time to wait before recording (N generations)
    "IND_RECORD_LIM": 20,  # number of times to record individuals
    "IND_RECORD_FREQ": 200,  # frequency of individual recording (generations)
    "OUTPATH": "out.trees",  # path to output tree sequence
}


def gen_dispersal_params(sigmas):
    return [
        {
            "SD": d,  # sigma_D - dispersal distance
            "SM": 0.4,  # sigma_M - mate choice distance
            "SI": 0.4,  # sigma_I - interaction distance
        }
        for d in sigmas
    ]


PARAM_DIR = Path("params")
PARAM_DIR.mkdir()

SEEDS = RNG.randint(0, 2**31)
REPS = 150
SIGMAS = np.repeat(np.linspace(0.35, 3, 25), REPS)
i = 0
for i, p in enumerate(gen_dispersal_params(SIGMAS)):
    with open(PARAM_DIR / f"{i}.json", "w") as fp:
        json.dump({**p, **MODEL_PARAMS, "SEED": RNG.randint(0, 2**31)}, fp, indent=2)
