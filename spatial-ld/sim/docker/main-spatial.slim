function (void)tlog(string$ message, [*$ s = NULL]) {
    if (isNULL(s)) {
        catn(paste("LOG:",  date() + "_" + time(),  message));
    }
    else {
        catn(paste("LOG:", date() + "_" + time() + " tick=" + s.cycle, message));
    }
}

function (object<Dictionary>$)setupParams(void) {
    // Read params from a json file (these can be overwritten on the
    // command line with -d arguments. We require that the json file exists
    // unless you specify -d NO_PARAM_FILE=T
    requiredParams = c(
        "K",               // carrying capacity
        "SD",              // sigma_D - dispersal distance
        "SI",              // sigma_I - interaction distance
        "SM",              // sigma_M - mate choice distance
        "L",               // mean lifetime
        "W",               // width and height of xy space
        "G",               // genome length
        "MU",              // mutation rate
        "R",               // recombination rate
        "SIM_END",         // absolute number of ticks to run for
        "IND_RECORD_LAG",  // time to wait before recording (N generations)
        "IND_RECORD_LIM",  // number of times to record individuals
        "IND_RECORD_FREQ", // frequency of individual recording (generations)
        "OUTPATH"          // path to output tree sequence
    );
    // params to be cast to integers
    intParams = c("G", "SIM_END", "IND_RECORD_LAG", "IND_RECORD_LIM", "IND_RECORD_FREQ");

    paramsFileRequired = exists("NO_PARAM_FILE") ? !(NO_PARAM_FILE == T) else T;
    if (paramsFileRequired) {
        if (!exists("PARAM_FILE")) {
            stop(paste("You must define PARAM_FILE for this simulation",
                       "(use -d 'PARAM_FILE=\"your_file\"') or you can",
                       "turn off this check with -d NO_PARAM_FILE=T and specify",
                       "all required parameters from the command line"));
        }
        if (!fileExists(PARAM_FILE)) {
            stop(paste("Param file does not exist:", PARAM_FILE));
        }
        params = Dictionary(readFile(PARAM_FILE));
        for (k in params.allKeys) {
            // Ensure certain parameters are ints.
            if (any(k == intParams)) {
                params.setValue(k, asInteger(params.getValue(k)));
            }
            // ignore parameters that are already defined (CLI or elsewhere)
            if (!exists(k)) {
                defineConstant(k, params.getValue(k));
            } else {
                params.setValue(k, executeLambda(k + ";"));
            }
        }
        if (!exists("SEED")) {
            params.setValue("SEED", getSeed());  // to store as metadata
        } else {
            setSeed(SEED);
        }
    }

    foundParams = sapply(requiredParams, "exists(applyValue);");
    if (!all(foundParams)) {
        stop(paste("Not all parameters specified, missing:",
                   paste(requiredParams[!foundParams])));
    }
    return params;
}

initialize() {
    defineConstant("PARAMS", setupParams());

    tlog("Simulation Start");
    tlog(paste("Working directory", getwd()));
    tlog(paste("Parameters", PARAMS.serialize("pretty")));
    initializeSLiMModelType("nonWF");
    initializeSLiMOptions(dimensionality="xy");
    initializeTreeSeq(checkCoalescence=T);

    defineConstant("FECUN", 1/L); // mean fecundity
    defineConstant("RHO", FECUN / ((1 + FECUN) * K));

    initializeMutationRate(MU);
    initializeMutationType("m1", 0.5, "f", 0.0);
    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElement(g1, 0, G-1);
    initializeRecombinationRate(R);

    defineGlobal("COALESCED", F);      // has the simulation coalesced?
    defineGlobal("IND_REC_COUNT", 0);  // number of individual recording steps

    // competition
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=3 * SI);
    // maximum val, SD
    i1.setInteractionFunction("n", 1.0 / (2 * PI * SI^2), SI);

    // mate choice
    initializeInteractionType(2, "xy", reciprocal=T, maxDistance=3 * SM);
    // maximum val, SD
    i2.setInteractionFunction("n", 1.0 / (2 * PI * SM^2), SM);

    // generation time recording
    defineGlobal("GENTIME", rep(NAN, SIM_END));

    // individual recording
    defineGlobal("SAMP_TIMES", rep(NAN, IND_RECORD_LIM));
    defineGlobal("IND_RECORD_TICKS", INF);
    defineGlobal("IND_RECORD_START", INF);
    defineGlobal("IND_RECORD_NEXT", INF);
}

1 first() {
    initPopSize = asInteger(K * W * W);
    sim.addSubpop("p1", initPopSize);
    p1.setSpatialBounds(c(0, 0, W, W));
    p1.individuals.setSpatialPosition(p1.pointUniform(initPopSize));
}

first() {
    // create interaction snapshot, in preparation for reproduction
    // i2 is our mate choice interaction
    i2.evaluate(p1);
}

reproduction() {
    // Mate choice by strength of i2 interaction. This does not preclude
    // chosen mates from mating agian.
    mate = i2.drawByStrength(individual, 1);
    if (mate.size()) {
        // Poisson number of offspring from chosen mate, with mean FECUN.
        subpop.addCrossed(individual, mate, count=rpois(1, FECUN));
    }
}

early() {
    // Offspring dispersal
    // Offspring of age 0 disperse
    offspring = p1.subsetIndividuals(maxAge=0);
    pos = offspring.spatialPosition;
    // Deviate offspring from their position using the reprising boundary cond
    // The limit of their dispersal is infinite, but we describe the distance with SD
    pos = p1.pointDeviated(offspring.size(), pos, "reprising", INF, "n", SD);
    offspring.setSpatialPosition(pos);
}

1: late() {
    i1.evaluate(p1);
    inds = sim.subpopulations.individuals;
    // competition =  i1.totalOfNeighborStrengths(inds);
    competition = i1.localPopulationDensity(inds);
    inds.fitnessScaling = pmin(0.95, 1/(1 + RHO * competition));
}

1: late() {
    // we record generation timem after mortality
    gentime = mean(p1.individuals.meanParentAge);
    GENTIME[community.tick - 1] = !isNULL(gentime) ? gentime else NAN;
}

late() {
    if (p1.individualCount == 0)  {
        tlog("Population went extinct", sim);
        sim.simulationFinished();
    }
    if ((sim.cycle % 1e4) == 0) {
        tlog("", sim);
    }
    // testing block
    // if ((sim.cycle == 100)) {
    //     defineGlobal("COALESCED", T);
    //     setRecordingInterval(sim, p1);
    // }
    if ((sim.cycle % 5e4) == 0) {
        if(!COALESCED) {  // only check if we haven't coalesced, this is expensive
            if(sim.treeSeqCoalesced()) {
                tlog("Simulation has coalesced, starting to record");
                defineGlobal("COALESCED", T);
                setRecordingInterval(sim, p1);
            }
        }
    }
    // record individuals after IND_RECORD_LAG * N generations
    if (sim.cycle > IND_RECORD_START) {
        // first cycle after lag, set the next record cycle
        if (!isInteger(IND_RECORD_NEXT)) {
            defineGlobal("IND_RECORD_NEXT", sim.cycle + IND_RECORD_TICKS);
        }
        if ((sim.cycle - IND_RECORD_NEXT) == 0) {
            recordIndividuals(sim, p1);
            if (IND_REC_COUNT == IND_RECORD_LIM) {
                endSimulation(sim, community, coalesced=T);
            }
            defineGlobal("IND_RECORD_NEXT", sim.cycle + IND_RECORD_TICKS);
        }
    }
}

SIM_END late() {
    endSimulation(sim, community, coalesced=F);
}

function (void)recordIndividuals(object<Species>$ s, object<Subpopulation>$ p) {
    tlog(paste("Recording Individuals", (IND_REC_COUNT + 1) + "/" + IND_RECORD_LIM));
    SAMP_TIMES[IND_REC_COUNT] = s.cycle;
    s.treeSeqRememberIndividuals(p1.individuals);
    defineGlobal("IND_REC_COUNT", IND_REC_COUNT + 1);
}

function (void)endSimulation(object<Species>$ s, object<Community> c, logical$ coalesced) {
    if (!coalesced) {
        tlog("Simulation End; No Coalescence");
    } else {
        tlog("Simulation End");
    }
    s.simulationFinished();
    // trim excess NANs from the end of GENTIME
    for (i in rev(seqAlong(GENTIME))) {
        if (!isNAN(GENTIME[i])) {
            break;
        }
    }
    GENTIME = GENTIME[0:i];
    s.treeSeqOutput(
        OUTPATH,
        metadata=Dictionary(
            "params", PARAMS,
            "generation_times", GENTIME,
            "sampling_times", SAMP_TIMES
        )
    );
    tlog(paste("Wrote trees to:", OUTPATH));
    tlog(paste("Memory usage:", usage()));
    c.outputUsage();
}

function (void)setRecordingInterval(object<Species>$ s, object<Subpopulation>$ p) {
    // Compute the generation time from the 50 most recent ticks
    genTime = mean(GENTIME[(s.cycle-51):(s.cycle-2)]);
    intGenTime = asInteger(round(genTime));
    // Set the interval at which we will record (in units of generation)
    defineGlobal("IND_RECORD_TICKS", intGenTime * IND_RECORD_FREQ);
    // Set the time at which we'll start recording
    defineGlobal("IND_RECORD_START", s.cycle + (intGenTime * IND_RECORD_LAG * p1.individualCount));
    tlog(paste("Measured", genTime,
        "ticks per generation, set recording interval to", IND_RECORD_TICKS,
        "starting to record at:", IND_RECORD_START));
}
