initialize() {
	print("Simulation Start " + date() + "_" + time());
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	initializeTreeSeq();

	defineConstant("id", getSeed());
	defineConstant("K", 5);  // carrying-capacity per unit square (roughly)
	defineConstant("SD", sigma);  // sigma_D, the dispersal distance
	defineConstant("SI", sigma);  // sigma_I, the spatial interaction distance
	defineConstant("SM", SI);  // sigma_M, the mate choice distance
	defineConstant("L", 4);    // mean lifetime at stationarity
	defineConstant("W", 25.0);  // width and height of the simulated area
	defineConstant("FECUN", 1/L); // mean fecundity
	defineConstant("RHO", FECUN/((1 + FECUN) * K)); // constant in spatial competition function

	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, G-1);
	// initializeMutationRate(1e-8);
	initializeMutationRate(0);
	initializeRecombinationRate(1e-8);

	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SI * 3);
	i1.setInteractionFunction("n", 1.0/(2 * PI * SI^2), SI);

	// mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SM * 3);
	i2.setInteractionFunction("n", 1.0/(2 * PI * SM^2), SM);

	defineConstant("NUMCYCLES", 2000000);
	// defineConstant("NUMCYCLES", 500);
	defineGlobal("GENTIME", rep(NAN, integerDiv(NUMCYCLES, 1e2)));
	// TODO MAKE AN ASSERTION ABOUT DIVISIBILITY HERE
}

reproduction() {
	mate = i2.drawByStrength(individual, 1);
	if (mate.size()) {
		nOff = rpois(1, FECUN);
		for (i in seqLen(nOff)) {
			pos = individual.spatialPosition + rnorm(2, 0, SD);
			if (p1.pointInBounds(pos)) {
				offspring = subpop.addCrossed(individual, mate);
				offspring.setSpatialPosition(pos);
			}
		}
	}
	return;
}

1 early() {
	sim.addSubpop("p1", asInteger(K * W * W));
	p1.setSpatialBounds(c(0, 0, W, W));
	for (ind in p1.individuals) {
		ind.setSpatialPosition(p1.pointUniform());
	}
	i1.evaluate(sim.subpopulations);
}

early() {
	i1.evaluate(p1);
	inds = p1.individuals;
	competition = i1.totalOfNeighborStrengths(inds);
	inds.fitnessScaling = pmin(0.95, 1/(1 + RHO * competition));
	// scale fitness at edges
	inds.fitnessScaling = inds.fitnessScaling
				* pmin(sqrt(inds.x/SI), 1.0)
				* pmin(sqrt(inds.y/SI), 1.0)
				* pmin(sqrt((W - inds.x)/SI), 1.0)
				* pmin(sqrt((W - inds.y)/SI), 1.0);
}

1: late() {
	if ((sim.cycle % 1e2) == 0) {
		GENTIME[integerDiv(sim.cycle, 1e2) - 1] = mean(p1.individuals.meanParentAge);
	}
	// to be ready for mate choice
	i2.evaluate(p1);
}

2: late() {
	if ((sim.cycle % 1e4)==0) {
		print(date() + "_" + time() + " " + sim.cycle);
	}
	if ((sim.cycle % 1e5)==0) {
		outname=outpath + "/" + id + "_" + sim.cycle + ".trees";
		sim.treeSeqOutput(outname);
	}
}

NUMCYCLES late() {
	outname=outpath + "/" + id + "_" + sim.cycle + ".trees";
	sim.treeSeqOutput(outname);
	print("Wrote tree sequence: " + outname);
	lines = NULL;
	for (val in GENTIME) {
		lines = c(lines, format("%f\n", val));
	}
	if (!writeFile(outpath + "/gentimes.txt", paste0(lines))) {
		stop("Error writing file: " + outpath + "/gentimes.txt");
	}
	print("Simulation End " + date() + "_" + time());
	sim.simulationFinished();
}
