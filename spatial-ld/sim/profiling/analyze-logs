#!/usr/bin/env python

import argparse
import csv

from pathlib import Path
from statistics import mean, pvariance, stdev
from warnings import warn

from datetime import datetime, timedelta

TIME_FMT = "%d-%m-%Y_%H:%M:%S"
LOG_FILENAME = "outerr.log"


def slim_strptime(time_str):
    return datetime.strptime(time_str, TIME_FMT)


def slim_strftime(time_obj):
    return datetime.strftime(time_obj, TIME_FMT)


def parse_params(path_name):
    try:
        sigma, chrom_len = path_name.split("_")
        sigma = float(sigma)
        chrom_len = int(chrom_len)
    except Exception as e:
        raise ValueError(f"path parameters have changed: path={path_name}") from e
    return dict(sigma=sigma, chrom_len=chrom_len)


def parse_log_stats(log_path, require_end):
    cycle_times = dict()
    cycle_durations = dict()
    start_time = None
    end_time = None
    with open(log_path, "r") as log:
        for line in log:
            if line.startswith('"'):
                line = line.strip().strip('"')
                if "Start" in line:
                    start_time = slim_strptime(line.split()[-1])
                elif "End" in line:
                    end_time = slim_strptime(line.split()[-1])
                elif len(fields := line.split(" ")) == 2:
                    time, cycle = fields
                    cycle_times[int(cycle)] = slim_strptime(time)
                else:
                    raise ValueError(f"unrecognized format: {line}")

    if start_time is None:
        raise Exception(f"Did not find a start time: {log_path}")

    cycle_ids = sorted(cycle_times.keys())
    if len(cycle_ids) == 0:
        raise Exception("No cycles found")

    if end_time is None:
        if require_end:
            raise Exception(f"Did not find an end time: {log_path}")
        else:
            end_time = cycle_times[cycle_ids[-1]]
            warn(f"Run has not finished yet: {log_path}")

    cycle_durations[cycle_ids[0]] = cycle_times[cycle_ids[0]] - start_time
    for i in range(1, len(cycle_ids)):
        cycle_durations[cycle_ids[i]] = (
            cycle_times[cycle_ids[i]] - cycle_times[cycle_ids[i - 1]]
        )

    assert len(cycle_durations) == len(cycle_ids), "error computing cycle durations"
    cycle_duration_mean = timedelta(
        seconds=mean([d.total_seconds() for d in cycle_durations.values()])
    )
    cycle_duration_pvar = timedelta(
        seconds=pvariance([d.total_seconds() for d in cycle_durations.values()])
    )
    cycle_duration_stdev = timedelta(
        seconds=stdev([d.total_seconds() for d in cycle_durations.values()])
    )
    sim_duration = end_time - start_time

    return dict(
        sim_duration=sim_duration,
        cycle_duration_mean=cycle_duration_mean,
        cycle_duration_stdev=cycle_duration_stdev,
        cycle_duration_pvar=cycle_duration_pvar,
    )


parser = argparse.ArgumentParser()
parser.add_argument(
    "sim_output_dir", type=Path, help="path to output dir containing log files"
)
parser.add_argument(
    "output_stats_file", type=Path, help="path to file to write stats to"
)
parser.add_argument(
    "--no-require-end",
    action="store_true",
    help="do not require simulation run to be finished, otherwise warn",
)
parser.add_argument("--overwrite", action="store_true", help="overwrite output")
args = parser.parse_args()

sim_info = []
for path in args.sim_output_dir.iterdir():
    params = parse_params(path.name)
    run_data = parse_log_stats(path / LOG_FILENAME, not args.no_require_end)
    sim_info.append({**params, **run_data})

for i in range(1, len(sim_info)):
    assert set(sim_info[i]) == set(
        sim_info[i - 1]
    ), f"not all dicts have equal keys: {sim_info[i]} {sim_info[i-1]}"


if not args.overwrite:
    if args.output_stats_file.exists():
        raise Exception(f'{args.output_stats_file} exists, use "--overwrite" or delete')

with open(args.output_stats_file, "w") as out_stats:
    writer = csv.DictWriter(out_stats, fieldnames=list(sim_info[0]))
    writer.writeheader()
    for si in sim_info:
        writer.writerow(si)
